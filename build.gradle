import org.gradle.internal.os.OperatingSystem;

buildscript {
  repositories {
    mavenCentral()
  }

  dependencies {
    classpath 'com.android.tools.build:gradle:1.3.1'
  }
}

allprojects {
  repositories {
    flatDir {
      // Add paths to prebuilt libs to all our subprojects.
      dir "$rootProject.projectDir/Vendor/VrApi/Libs/Android"
      dir "$rootProject.projectDir/Vendor/VrAppFramework/Libs/Android"
      dir "$rootProject.projectDir/Vendor/VrAppSupport/SystemUtils/Libs/Android"
    }
  }
}

def GetNDKBuildCmd() {

  def ndkDir = System.getenv('ANDROID_NDK_HOME')
  if( ndkDir == null )
  {
    ndkDir = System.getenv('ANDROID_NDK')
  }
  if( ndkDir == null )
  {
    ndkDir = System.getenv('NDKROOT')
  }
  if( ndkDir == null )
  {
    Properties properties = new Properties()
    properties.load(project.rootProject.file('local.properties').newDataInputStream())
    ndkDir = properties.getProperty('ndk.dir')
  }
  if( ndkDir == null )
  {
    throw new GradleException('NDK not found! Check your environment for ANDROID_NDK or your local.properties contains ndk.dir')
  }
  if ( OperatingSystem.current().isWindows() ) {
    return ndkDir + '/ndk-build.cmd'
  } else {
    return ndkDir + '/ndk-build'
  }
}

subprojects {

  task printProjectName << {
	println rootProject.name
  }

  task NDKBuildDebug(type: Exec) {
    commandLine GetNDKBuildCmd(), 'V=0', '-j10', 'NDK_DEBUG=1', 'OVR_DEBUG=1'
  }

  task NDKBuildRelease(type: Exec) {
    commandLine GetNDKBuildCmd(), 'V=0', '-j10', 'NDK_DEBUG=0', 'OVR_DEBUG=0'
  }

  task NDKBuildClean(type: Exec) {
    commandLine GetNDKBuildCmd(), 'clean'
  }

}
